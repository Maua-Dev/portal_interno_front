name: AWS Cd
on:
  push:
    branches:
      - dev
      - create-cd
jobs:
  DeployToAWS:
    environment: 
      name: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
        - uses: actions/checkout@v2
        - name: Setup AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-region: ${{ vars.AWS_REGION }}
            role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GithubActionsRole
            role-session-name: github-action
        - name: Use Node.js 18.x
          uses: actions/setup-node@v3
          with:
            node-version: 18.x
        - name: Setting stage and stack name
          run: |
            echo "STAGE=${{ github.ref_name }}" 
            echo "STACK_NAME=PortalInternoStackFront${{github.ref_name}}" >> $GITHUB_ENV
        - name: Installing Dependencies
          run: |
            yarn global add aws-cdk
            yarn install -g
            cd iac
            yarn install
        - name: Build and Export
          run: |
            yarn next build
            yarn next export
        - name: Deploy with CDK
          run: |
            cd iac
            cdk synth
            cdk deploy --require-approval never 
        - name: Set CloudFront ID
          run: |
            CLOUD_FRONT_ID=$(aws cloudformation --region ${{vars.AWS_REGION}} describe-stacks --stack-name ${{env.STACK_NAME}} --query "Stacks[0].Outputs[?OutputKey=='CloudfrontId'].OutputValue" --output text)
            echo "CLOUD_FRONT_ID='$CLOUD_FRONT_ID'" >> $GITHUB_ENV
        - name: Set AWS Bucket
          run: |
            AWS_BUCKET=$(aws cloudformation --region ${{vars.AWS_REGION}} describe-stacks --stack-name ${{env.STACK_NAME}} --query "Stacks[0].Outputs[?OutputKey=='AwsBucket'].OutputValue" --output text)
            echo "AWS_BUCKET='$AWS_BUCKET'" >> $GITHUB_ENV
        - name: Upload to S3
          run: aws s3 cp out s3://${{env.AWS_BUCKET}}/ --recursive --region ${{ vars.AWS_REGION }}
        - name: Clear CDN cache
          run: aws cloudfront create-invalidation --distribution-id ${{env.CLOUD_FRONT_ID}} --paths "/*" --region us-east-1
          env:
              AWS_REGION: ${{ vars.AWS_REGION }}
              AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
              STACK_NAME: ${{ env.STACK_NAME }}
              GITHUB_REF_NAME: ${{ github.ref_name }}
              ACM_CERTIFICATE_ARN: ${{ secrets.ACM_CERTIFICATE_ARN }}
              HOSTED_ZONE_ID: ${{ secrets.HOSTED_ZONE_ID }}
              ALTERNATIVE_DOMAIN_NAME: ${{ vars.ALTERNATIVE_DOMAIN_NAME }}